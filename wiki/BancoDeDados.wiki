#labels DB,database,bancodedados,conector,connect,_db
<g:plusone size="medium"></g:plusone>
Como acessar os bancos de dados na versão 2.0 do NEOS


= Introduction =

A versão 2.0 do NEOS introduz conceitos de orientação a objeto oriundas das atualizações da versão 5.3.x do PHP, contribuindo para uma estruturação mais moderna do código do framework e sua aplicação (sites).


= O Diretório DB =

Abrindo o diretório DB (core/neos/db) podemos ver uma estrutura que se repete em outros diretórios do neos. Encontramos dois arquivos principais com os nomes de "abstract.php" e "interface.php". São, respectivamente, uma classe abstrata base e sua interface.
O segundo arquivo neste diretório e o "conector.php". A própria classe "DB".

== A classe Conector ==

Todo o acesso a banco de dados no NEOS é feito por essa classe. Evidentemente um acesso da forma convencional, usando classes (PDO, Mysql,etc) e funções nativas da linguagem PHP pode ser usado, porém, padronizar o uso através desta classe pode ser muito mais vantajoso.

A classe possui os seguintes métodos:

=== connect ===

{{{
    sintaxe: $objDriver = Neos\Db\Conector->connect([string $alias]);
}}}

Este método retorna um objeto "driver" que proporciona o acesso ao banco de dados indicado pelo 'alias' (argumento da função);
Um 'alias' (ou apelido) pode ser definido nos arquivos de configuração (core/neos/config/database.php) como neste exemplo:

{{{
$cfg->db->alias->driver = 'sqlite';
$cfg->db->alias->database = 'caminho completo para o arquivo sqlite';
}}}

Onde 'alias' pode ser qualquer apelido para a conexão de banco de dados configurada e, neste caso, 'database' indica o parâmetro de conexão com o arquivo do sqlite.
Existem outros parâmetros como: 'host', 'user', 'pass', 'charset', 'dsn'. 

=== query ===

{{{
    sintaxe: mixed $ret = Neos\Db\Conector::query(string $sql [, String $alias]);
}}}

O método faz uma simples consulta no banco de dados especificado em $alias ou, na ausência deste parâmetro, no alias default.
O retorno ($ret) pode ser de vários tipos, conforme o tipo da QUERY.


{{{
Exemplo (usando class_alias):

$ret = _db::query('SELECT * FROM TABELA');
if($ret){
    foreach($ret as $key=>$val){
        echo '<p>' . $key . ': ' . $val . '</p>';
    }
}
else{
    echo '<p>A consulta não retornou dados.</p>';
}

}}}

<h3>Insert</h3>_em construção_


<h3>Update</h3>_em construção_


<h3>Delete</h3>_em construção_


<h3>Clear</h3>_em construção_


<h3>Create</h3>_em construção_


<h2>PDO (PHP Data Object)</h2>_em construção_